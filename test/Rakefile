# frozen_string_literal: true

require 'pathname'
require 'csv'

# Describes chromosome regions
#
class ChrRegion
  # @return [Integer]
  attr_reader :chr, :spos, :epos

  def initialize(chr, spos, epos)
    @chr  = chr
    @spos = spos
    @epos = epos
  end

  def ==(other)
    @chr == other.chr && @spos == other.spos && @epos == other.epos
  end

  def eql?(other)
    self == other
  end

  def hash
    [@chr, @spos, @epos].hash
  end

  def to_s
    "chr#{@chr} #{@spos}:#{@epos}"
  end
end

# @abstract
class AbstractCWLTest
  include Rake::DSL

  # @return [Rake::Task] task
  attr_reader :final_task

  # @param sample   [String] sample name
  # @param workflow [String] workflow name
  # @param deps     [AbstractCWLTest, Array<AbstractCWLTest>] depending tests
  def initialize(sample, workflow, deps = [])
    @sample    = sample
    @workflow  = workflow
    @out_dir   = Pathname.new("#{sample}/output/#{workflow}")
    @dep_tasks = deps.is_a?(Array) ? deps.map(&:final_task) : [deps.final_task]
    namespace @sample do
      directory @out_dir
      define_task
    end
  end

  private

  def define_task
    raise NotImplementedError
  end

  def register_task(name)
    @final_task = Rake::Task[name]
  end

  def run_cwltool(workflow_path, job_path)
    sh "cwltool --singularity --outdir #{@out_dir} #{workflow_path} #{job_path}"
  end
end

class SimulateTumorBAMToFASTQ < AbstractCWLTest
  def initialize(deps = [])
    super('simulate', 'bwa-alignment', deps)
  end

  def define_task
    fq1_path, fq2_path = [1, 2].map do |i|
      @out_dir / "simulate_T.sequence#{i}.fastq"
    end

    file fq1_path => @dep_tasks do
      run_cwltool(
        '../Workflows/bamtofastq.cwl',
        'simulate/Jobs/simulate_T-bamtofastq.yaml'
      )
    end

    file fq2_path => fq1_path

    desc 'bam2fastq'
    task :bamtofastq => [fq1_path, fq2_path]

    register_task :bamtofastq
  end
end

class SimulateBWAAlignment < AbstractCWLTest
  def initialize(read_name, job_path, deps = [])
    @read_name = read_name
    @job_path  = job_path
    super('simulate', 'bwa-alignment', deps)
  end

  def define_task
    bam_path = @out_dir / "#{@read_name}.markdup.bam"

    file bam_path => [@out_dir] + @dep_tasks do
      run_cwltool('../Workflows/bwa-alignment.cwl', @job_path)
    end

    task_name = "bwa_alignment_#{@read_name}"

    desc 'bwa-alignment'
    task task_name => bam_path

    register_task task_name
  end
end

class SimulateMutationCallNormalWithoutControl < AbstractCWLTest
  def initialize(deps = [])
    super('simulate', 'mutation-call-with-normal-without-control', deps)
  end

  def define_task
    file @out_dir / 'genomon_mutation.result.filt.txt' =>
         @dep_tasks + [@out_dir / 'genomon_mutation.result.txt']

    file @out_dir / 'genomon_mutation.result.txt' => @outdir do
      run_cwltool(
        '../Workflows/mutation-call-with-normal-without-control.cwl',
        'simulate/Jobs/simulate-mutation-call-with-normal-without-control.yaml'
      )
    end

    desc 'mutation-call-with-normal-without-control'
    task :mutation_call_with_normal_without_control =>
         @out_dir / 'genomon_mutation.result.filt.txt'

    desc 'validation'
    task 'mutation_call_with_normal_without_control:validate' =>
         :mutation_call_with_normal_without_control do
      validate(
        @out_dir / 'genomon_mutation.result.txt',
        '/home/fujino/data/genomon/_GRCh37/output/dna/mutation/tumor/tumor.genomon_mutation.result.txt'
      )
    end
  end

  # @param path [String] mutation result file path
  # @return     [Hash{ ChrRegion => CSV::Row }]
  def load_mutation_file(path)
    str = File.readlines(path, chomp: true).reject do |line|
      line =~ /^#/
    end.join("\n")

    CSV.new(str, col_sep: "\t", headers: true).group_by do |row|
      ChrRegion.new(row['Chr'], row['Start'], row['End'])
    end.map.to_h do |region, a|
      # (chr, start, end) should be unique
      if a.length > 1
        warn "#{k} is not a unique key: #{path}"
        exit 1
      end

      [region, a.first]
    end
  end

  # @param name   [String]
  # @param hash   [Hash{ ChrRegion => CSV::Row }]
  # @param region [ChrRegion]
  # @return       [Boolean]
  def exists_value?(name, hash, region)
    return true if hash[region]

    puts "#{name} does not have entry for #{region}"
    return false
  end

  # @param result_path [String]
  # @param comp_path   [String]
  def validate(result_path, comp_path)
    hash_result = load_mutation_file(result_path)
    hash_comp   = load_mutation_file(comp_path)
    hash_result.keys.union(hash_comp.keys).each do |region|
      next unless exists_value?('result', hash_result, region) &&
                  exists_value?('comp',   hash_comp,   region)

      compare_row(region, hash_result[region], hash_comp[region])
    end
  end

  # @param region [ChrRegion]
  # @param result [CSV::Row]
  # @param comp   [CSV::Row]
  def compare_row(region, result, comp)
    # the following fields in comp are not used for comparison:
    #   HGVD_20131010:#Sample
    #   HGVD_20131010:Filter
    #   HGVD_20131010:NR
    #   HGVD_20131010:NA
    #   HGVD_20131010:Frequency(NA/(NA+NR))
    [
      'Ref',
      'Alt',
      'depth_tumor',
      'variantNum_tumor',
      'depth_normal',
      'variantNum_normal',
      'bases_tumor',
      'bases_normal',
      'A_C_G_T_tumor',
      'A_C_G_T_normal',
      'misRate_tumor',
      'strandRatio_tumor',
      'misRate_normal',
      'strandRatio_normal',
      'P-value(fisher)',
      'score(hotspot)',
      'readPairNum_tumor',
      'variantPairNum_tumor',
      'otherPairNum_tumor',
      'readPairNum_normal',
      'variantPairNum_normal',
      'otherPairNum_normal',
      'P-value(fisher_realignment)',
      'indel_mismatch_count',
      ['indel_mismatch_rate', ->x { sprintf('%4.3f', x) }],
      'bp_mismatch_count',
      'distance_from_breakpoint',
      'simple_repeat_pos',
      'simple_repeat_seq',
      'HGVD_20160412:#Sample',
      'HGVD_20160412:Filter',
      'HGVD_20160412:NR',
      'HGVD_20160412:NA',
      'HGVD_20160412:Frequency(NA/(NA+NR))',
      'ExAC:Filter',
      'ExAC:AC_Adj',
      'ExAC:AN_Adj',
      'ExAC:Frequency(AC_Adj/AN_Adj)',
      'ExAC:AC_POPMAX',
      'ExAC:AN_POPMAX',
      'ExAC:Frequency(AC_POPMAX/AN_POPMAX)',
      'ExAC:POPMAX'
    ].each do |field, formatter|
      formatter = ->x { x } unless formatter
      next if formatter[result[field]] == formatter[comp[field]]

      puts "#{region}, #{field}, result = #{result[field]}, comp = #{comp[field]}"
    end
  end
end

bamtofastq_test = SimulateTumorBAMToFASTQ.new

alignment_tests = %w[N T].map do |type|
  SimulateBWAAlignment.new(
    "simulate_#{type}",
    "simulate/Jobs/simulate_#{type}-bwa-alignment.yaml",
    bamtofastq_test
  )
end

SimulateMutationCallNormalWithoutControl.new(alignment_tests)
